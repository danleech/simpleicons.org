/**
 * @fileoverview
 * Updates the SDK Typescript definitions located in the file sdk.d.ts
 * to match the current definitions of functions of sdk.mjs.
 */

import fs from 'node:fs';
import path from 'node:path';
import { execSync } from 'node:child_process';
import { getDirnameFromImportMeta } from '../../sdk.mjs';

const __dirname = getDirnameFromImportMeta(import.meta.url);
const rootDir = path.resolve(__dirname, '..', '..');

const sdkTs = path.resolve(rootDir, 'sdk.d.ts');
const sdkMts = path.resolve(rootDir, 'sdk.d.mts');
const sdkMjs = path.resolve(rootDir, 'sdk.mjs');

const generateSdkMts = () => {
  // remove temporally type definitions imported with comments
  // in sdk.mjs to avoid circular imports
  const originalSdkMjsContent = fs.readFileSync(sdkMjs, 'utf-8');
  const tempSdkMjsContent = originalSdkMjsContent
    .split('\n')
    .filter((line) => {
      return !line.startsWith(' * @typedef {import("./sdk")');
    })
    .join('\n');
  fs.writeFileSync(sdkMjs, tempSdkMjsContent);
  try {
    execSync(
      'tsc sdk.mjs --declaration --emitDeclarationOnly --allowJs --removeComments',
    );
  } catch (error) {
    console.log(
      `Error ${error.status} generating Typescript` +
        ` definitions: '${error.message}'`,
    );
    process.exit(1);
  }
  fs.writeFileSync(sdkMjs, originalSdkMjsContent);
};

const updateSdkTsDefinitions = () => {
  fs.existsSync(sdkMts) && fs.unlinkSync(sdkMts);
  generateSdkMts();

  const autogeneratedMsg = '/* The next code is autogenerated from sdk.mjs */';
  const newSdkTsContent =
    fs.readFileSync(sdkTs, 'utf-8').split(autogeneratedMsg)[0] +
    `${autogeneratedMsg}\n\n${fs.readFileSync(sdkMts, 'utf-8')}`;

  fs.writeFileSync(sdkTs, newSdkTsContent);
  fs.unlinkSync(sdkMts);
};

updateSdkTsDefinitions();
