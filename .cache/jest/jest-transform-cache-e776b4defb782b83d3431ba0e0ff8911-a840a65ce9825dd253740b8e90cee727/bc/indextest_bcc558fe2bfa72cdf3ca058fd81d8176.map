{"version":3,"sources":["index.test.js"],"names":["icons","require","simpleIcons","getIconSlug","forEach","icon","slug","subject","test","title","expect","toBe","toEqual","hex","source","svg","path","toMatch","guidelines","toBeUndefined","license","toHaveProperty","type","url","found","Get","toBeDefined","get","iconArray","Object","values"],"mappings":"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","sourcesContent":["const { icons } = require('../_data/simple-icons.json');\nconst simpleIcons = require('../index.js');\nconst { getIconSlug } = require(\"../scripts/utils.js\");\n\nicons.forEach(icon => {\n  const slug = getIconSlug(icon);\n  const subject = simpleIcons[slug];\n\n  test(`${icon.title} has the correct \"title\"`, () => {\n    expect(typeof subject.title).toBe('string');\n    expect(subject.title).toEqual(icon.title);\n  });\n\n  test(`${icon.title} has the correct \"slug\"`, () => {\n    expect(typeof subject.slug).toBe('string');\n    expect(subject.slug).toEqual(slug);\n  });\n\n  test(`${icon.title} has the correct \"hex\" value`, () => {\n    expect(typeof subject.hex).toBe('string');\n    expect(subject.hex).toEqual(icon.hex);\n  });\n\n  test(`${icon.title} has the correct \"source\"`, () => {\n    expect(typeof subject.source).toBe('string');\n    expect(subject.source).toEqual(icon.source);\n  });\n\n  test(`${icon.title} has an \"svg\" value`, () => {\n    expect(typeof subject.svg).toBe('string');\n  });\n\n  test(`${icon.title} has a valid \"path\" value`, () => {\n    expect(typeof subject.path).toBe('string');\n    expect(subject.path).toMatch(/^[MmZzLlHhVvCcSsQqTtAaEe0-9-,.\\s]+$/g);\n  });\n\n  test(`${icon.title} has ${icon.guidelines ? \"the correct\" : \"no\"} \"guidelines\"`, () => {\n    if (icon.guidelines) {\n      expect(typeof subject.guidelines).toBe('string');\n      expect(subject.guidelines).toEqual(icon.guidelines);\n    } else {\n      expect(subject.guidelines).toBeUndefined();\n    }\n  });\n\n  test(`${icon.title} has ${icon.license ? \"the correct\" : \"no\"} \"license\"`, () => {\n    if (icon.license) {\n      expect(typeof subject.license).toBe('object');\n      expect(subject.license).toHaveProperty('type', icon.license.type);\n      if (icon.license.type === \"custom\") {\n        expect(subject.license).toHaveProperty('url', icon.license.url);\n      } else {\n        expect(typeof subject.license.url).toBe('string');\n        expect(subject.license.url).toMatch(/^https?:\\/\\/[^\\s]+$/);\n      }\n    } else {\n      expect(subject.license).toBeUndefined();\n    }\n  });\n\n  test(`'Get' ${icon.title} by its slug`, () => {\n    const found = simpleIcons.Get(slug);\n    expect(found).toBeDefined();\n    expect(found.title).toEqual(icon.title);\n    expect(found.hex).toEqual(icon.hex);\n    expect(found.source).toEqual(icon.source);\n  });\n\n  test(`'get' ${icon.title} by its slug`, () => {\n    const found = simpleIcons.get(slug);\n    expect(found).toBeDefined();\n    expect(found.title).toEqual(icon.title);\n    expect(found.hex).toEqual(icon.hex);\n    expect(found.source).toEqual(icon.source);\n  });\n});\n\ntest(`Iterating over simpleIcons only exposes icons`, () => {\n  const iconArray = Object.values(simpleIcons);\n  for (let icon of iconArray) {\n    expect(icon).toBeDefined();\n    expect(typeof icon).toBe('object');\n  }\n});\n"]}