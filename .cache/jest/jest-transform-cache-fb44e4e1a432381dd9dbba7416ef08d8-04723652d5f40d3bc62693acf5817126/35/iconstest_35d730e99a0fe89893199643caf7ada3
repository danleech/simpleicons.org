07df94a786797d210456dd2a1b8fd3e2
const {
  icons
} = require('../_data/simple-icons.json');

const {
  getIconSlug
} = require('../scripts/utils.js');

icons.forEach(icon => {
  const filename = getIconSlug(icon);

  const subject = require(`../icons/${filename}.js`);

  test(`${icon.title} has the correct "title"`, () => {
    expect(typeof subject.title).toBe('string');
    expect(subject.title).toEqual(icon.title);
  });
  test(`${icon.title} has the correct "slug"`, () => {
    expect(typeof subject.slug).toBe('string');
    expect(subject.slug).toEqual(getIconSlug(icon));
  });
  test(`${icon.title} has the correct "hex" value`, () => {
    expect(typeof subject.hex).toBe('string');
    expect(subject.hex).toEqual(icon.hex);
  });
  test(`${icon.title} has the correct "source"`, () => {
    expect(typeof subject.source).toBe('string');
    expect(subject.source).toEqual(icon.source);
  });
  test(`${icon.title} has an "svg" value`, () => {
    expect(typeof subject.svg).toBe('string');
  });
  test(`${icon.title} has a valid "path" value`, () => {
    expect(typeof subject.path).toBe('string');
    expect(subject.path).toMatch(/^[MmZzLlHhVvCcSsQqTtAaEe0-9-,.\s]+$/g);
  });
  test(`${icon.title} has ${icon.guidelines ? "the correct" : "no"} "guidelines"`, () => {
    if (icon.guidelines) {
      expect(typeof subject.guidelines).toBe('string');
      expect(subject.guidelines).toEqual(icon.guidelines);
    } else {
      expect(subject.guidelines).toBeUndefined();
    }
  });
  test(`${icon.title} has ${icon.license ? "the correct" : "no"} "license"`, () => {
    if (icon.license) {
      expect(typeof subject.license).toBe('object');
      expect(subject.license).toHaveProperty('type', icon.license.type);

      if (icon.license.type === "custom") {
        expect(subject.license).toHaveProperty('url', icon.license.url);
      } else {
        expect(typeof subject.license.url).toBe('string');
        expect(subject.license.url).toMatch(/^https?:\/\/[^\s]+$/);
      }
    } else {
      expect(subject.license).toBeUndefined();
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImljb25zLnRlc3QuanMiXSwibmFtZXMiOlsiaWNvbnMiLCJyZXF1aXJlIiwiZ2V0SWNvblNsdWciLCJmb3JFYWNoIiwiaWNvbiIsImZpbGVuYW1lIiwic3ViamVjdCIsInRlc3QiLCJ0aXRsZSIsImV4cGVjdCIsInRvQmUiLCJ0b0VxdWFsIiwic2x1ZyIsImhleCIsInNvdXJjZSIsInN2ZyIsInBhdGgiLCJ0b01hdGNoIiwiZ3VpZGVsaW5lcyIsInRvQmVVbmRlZmluZWQiLCJsaWNlbnNlIiwidG9IYXZlUHJvcGVydHkiLCJ0eXBlIiwidXJsIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBWUMsT0FBTyxDQUFDLDRCQUFELENBQXpCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFrQkQsT0FBTyxDQUFDLHFCQUFELENBQS9COztBQUVBRCxLQUFLLENBQUNHLE9BQU4sQ0FBY0MsSUFBSSxJQUFJO0FBQ3BCLFFBQU1DLFFBQVEsR0FBR0gsV0FBVyxDQUFDRSxJQUFELENBQTVCOztBQUNBLFFBQU1FLE9BQU8sR0FBR0wsT0FBTyxDQUFFLFlBQVdJLFFBQVMsS0FBdEIsQ0FBdkI7O0FBRUFFLEVBQUFBLElBQUksQ0FBRSxHQUFFSCxJQUFJLENBQUNJLEtBQU0sMEJBQWYsRUFBMEMsTUFBTTtBQUNsREMsSUFBQUEsTUFBTSxDQUFDLE9BQU9ILE9BQU8sQ0FBQ0UsS0FBaEIsQ0FBTixDQUE2QkUsSUFBN0IsQ0FBa0MsUUFBbEM7QUFDQUQsSUFBQUEsTUFBTSxDQUFDSCxPQUFPLENBQUNFLEtBQVQsQ0FBTixDQUFzQkcsT0FBdEIsQ0FBOEJQLElBQUksQ0FBQ0ksS0FBbkM7QUFDRCxHQUhHLENBQUo7QUFLQUQsRUFBQUEsSUFBSSxDQUFFLEdBQUVILElBQUksQ0FBQ0ksS0FBTSx5QkFBZixFQUF5QyxNQUFNO0FBQ2pEQyxJQUFBQSxNQUFNLENBQUMsT0FBT0gsT0FBTyxDQUFDTSxJQUFoQixDQUFOLENBQTRCRixJQUE1QixD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LElBQUksQ0FBQ2dCLE9BQUwsQ0FBYUcsR0FBM0Q7QUFDRCxPQUZELE1BRU87QUFDTGQsUUFBQUEsTUFBTSxDQUFDLE9BQU9ILE9BQU8sQ0FBQ2MsT0FBUixDQUFnQkcsR0FBeEIsQ0FBTixDQUFtQ2IsSUFBbkMsQ0FBd0MsUUFBeEM7QUFDQUQsUUFBQUEsTUFBTSxDQUFDSCxPQUFPLENBQUNjLE9BQVIsQ0FBZ0JHLEdBQWpCLENBQU4sQ0FBNEJOLE9BQTVCLENBQW9DLHFCQUFwQztBQUNEO0FBQ0YsS0FURCxNQVNPO0FBQ0xSLE1BQUFBLE1BQU0sQ0FBQ0gsT0FBTyxDQUFDYyxPQUFULENBQU4sQ0FBd0JELGFBQXhCO0FBQ0Q7QUFDRixHQWJHLENBQUo7QUFjRCxDQXhERCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgaWNvbnMgfSA9IHJlcXVpcmUoJy4uL19kYXRhL3NpbXBsZS1pY29ucy5qc29uJyk7XHJcbmNvbnN0IHsgZ2V0SWNvblNsdWcgfSA9IHJlcXVpcmUoJy4uL3NjcmlwdHMvdXRpbHMuanMnKTtcclxuXHJcbmljb25zLmZvckVhY2goaWNvbiA9PiB7XHJcbiAgY29uc3QgZmlsZW5hbWUgPSBnZXRJY29uU2x1ZyhpY29uKTtcclxuICBjb25zdCBzdWJqZWN0ID0gcmVxdWlyZShgLi4vaWNvbnMvJHtmaWxlbmFtZX0uanNgKTtcclxuXHJcbiAgdGVzdChgJHtpY29uLnRpdGxlfSBoYXMgdGhlIGNvcnJlY3QgXCJ0aXRsZVwiYCwgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHR5cGVvZiBzdWJqZWN0LnRpdGxlKS50b0JlKCdzdHJpbmcnKTtcclxuICAgIGV4cGVjdChzdWJqZWN0LnRpdGxlKS50b0VxdWFsKGljb24udGl0bGUpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KGAke2ljb24udGl0bGV9IGhhcyB0aGUgY29ycmVjdCBcInNsdWdcImAsICgpID0+IHtcclxuICAgIGV4cGVjdCh0eXBlb2Ygc3ViamVjdC5zbHVnKS50b0JlKCdzdHJpbmcnKTtcclxuICAgIGV4cGVjdChzdWJqZWN0LnNsdWcpLnRvRXF1YWwoZ2V0SWNvblNsdWcoaWNvbikpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KGAke2ljb24udGl0bGV9IGhhcyB0aGUgY29ycmVjdCBcImhleFwiIHZhbHVlYCwgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHR5cGVvZiBzdWJqZWN0LmhleCkudG9CZSgnc3RyaW5nJyk7XHJcbiAgICBleHBlY3Qoc3ViamVjdC5oZXgpLnRvRXF1YWwoaWNvbi5oZXgpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KGAke2ljb24udGl0bGV9IGhhcyB0aGUgY29ycmVjdCBcInNvdXJjZVwiYCwgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHR5cGVvZiBzdWJqZWN0LnNvdXJjZSkudG9CZSgnc3RyaW5nJyk7XHJcbiAgICBleHBlY3Qoc3ViamVjdC5zb3VyY2UpLnRvRXF1YWwoaWNvbi5zb3VyY2UpO1xyXG4gIH0pO1xyXG5cclxuICB0ZXN0KGAke2ljb24udGl0bGV9IGhhcyBhbiBcInN2Z1wiIHZhbHVlYCwgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHR5cGVvZiBzdWJqZWN0LnN2ZykudG9CZSgnc3RyaW5nJyk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoYCR7aWNvbi50aXRsZX0gaGFzIGEgdmFsaWQgXCJwYXRoXCIgdmFsdWVgLCAoKSA9PiB7XHJcbiAgICBleHBlY3QodHlwZW9mIHN1YmplY3QucGF0aCkudG9CZSgnc3RyaW5nJyk7XHJcbiAgICBleHBlY3Qoc3ViamVjdC5wYXRoKS50b01hdGNoKC9eW01tWnpMbEhoVnZDY1NzUXFUdEFhRWUwLTktLC5cXHNdKyQvZyk7XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoYCR7aWNvbi50aXRsZX0gaGFzICR7aWNvbi5ndWlkZWxpbmVzID8gXCJ0aGUgY29ycmVjdFwiIDogXCJub1wifSBcImd1aWRlbGluZXNcImAsICgpID0+IHtcclxuICAgIGlmIChpY29uLmd1aWRlbGluZXMpIHtcclxuICAgICAgZXhwZWN0KHR5cGVvZiBzdWJqZWN0Lmd1aWRlbGluZXMpLnRvQmUoJ3N0cmluZycpO1xyXG4gICAgICBleHBlY3Qoc3ViamVjdC5ndWlkZWxpbmVzKS50b0VxdWFsKGljb24uZ3VpZGVsaW5lcyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBleHBlY3Qoc3ViamVjdC5ndWlkZWxpbmVzKS50b0JlVW5kZWZpbmVkKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHRlc3QoYCR7aWNvbi50aXRsZX0gaGFzICR7aWNvbi5saWNlbnNlID8gXCJ0aGUgY29ycmVjdFwiIDogXCJub1wifSBcImxpY2Vuc2VcImAsICgpID0+IHtcclxuICAgIGlmIChpY29uLmxpY2Vuc2UpIHtcclxuICAgICAgZXhwZWN0KHR5cGVvZiBzdWJqZWN0LmxpY2Vuc2UpLnRvQmUoJ29iamVjdCcpO1xyXG4gICAgICBleHBlY3Qoc3ViamVjdC5saWNlbnNlKS50b0hhdmVQcm9wZXJ0eSgndHlwZScsIGljb24ubGljZW5zZS50eXBlKTtcclxuICAgICAgaWYgKGljb24ubGljZW5zZS50eXBlID09PSBcImN1c3RvbVwiKSB7XHJcbiAgICAgICAgZXhwZWN0KHN1YmplY3QubGljZW5zZSkudG9IYXZlUHJvcGVydHkoJ3VybCcsIGljb24ubGljZW5zZS51cmwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGV4cGVjdCh0eXBlb2Ygc3ViamVjdC5saWNlbnNlLnVybCkudG9CZSgnc3RyaW5nJyk7XHJcbiAgICAgICAgZXhwZWN0KHN1YmplY3QubGljZW5zZS51cmwpLnRvTWF0Y2goL15odHRwcz86XFwvXFwvW15cXHNdKyQvKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZXhwZWN0KHN1YmplY3QubGljZW5zZSkudG9CZVVuZGVmaW5lZCgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59KTtcclxuIl19