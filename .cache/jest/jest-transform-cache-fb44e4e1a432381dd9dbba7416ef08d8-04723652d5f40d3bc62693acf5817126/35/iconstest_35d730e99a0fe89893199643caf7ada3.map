{"version":3,"sources":["icons.test.js"],"names":["icons","require","getIconSlug","forEach","icon","filename","subject","test","title","expect","toBe","toEqual","slug","hex","source","svg","path","toMatch","guidelines","toBeUndefined","license","toHaveProperty","type","url"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,OAAO,CAAC,4BAAD,CAAzB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,OAAO,CAAC,qBAAD,CAA/B;;AAEAD,KAAK,CAACG,OAAN,CAAcC,IAAI,IAAI;AACpB,QAAMC,QAAQ,GAAGH,WAAW,CAACE,IAAD,CAA5B;;AACA,QAAME,OAAO,GAAGL,OAAO,CAAE,YAAWI,QAAS,KAAtB,CAAvB;;AAEAE,EAAAA,IAAI,CAAE,GAAEH,IAAI,CAACI,KAAM,0BAAf,EAA0C,MAAM;AAClDC,IAAAA,MAAM,CAAC,OAAOH,OAAO,CAACE,KAAhB,CAAN,CAA6BE,IAA7B,CAAkC,QAAlC;AACAD,IAAAA,MAAM,CAACH,OAAO,CAACE,KAAT,CAAN,CAAsBG,OAAtB,CAA8BP,IAAI,CAACI,KAAnC;AACD,GAHG,CAAJ;AAKAD,EAAAA,IAAI,CAAE,GAAEH,IAAI,CAACI,KAAM,yBAAf,EAAyC,MAAM;AACjDC,IAAAA,MAAM,CAAC,OAAOH,OAAO,CAACM,IAAhB,CAAN,CAA4BF,IAA5B,CAAiC,QAAjC;AACAD,IAAAA,MAAM,CAACH,OAAO,CAACM,IAAT,CAAN,CAAqBD,OAArB,CAA6BT,WAAW,CAACE,IAAD,CAAxC;AACD,GAHG,CAAJ;AAKAG,EAAAA,IAAI,CAAE,GAAEH,IAAI,CAACI,KAAM,8BAAf,EAA8C,MAAM;AACtDC,IAAAA,MAAM,CAAC,OAAOH,OAAO,CAACO,GAAhB,CAAN,CAA2BH,IAA3B,CAAgC,QAAhC;AACAD,IAAAA,MAAM,CAACH,OAAO,CAACO,GAAT,CAAN,CAAoBF,OAApB,CAA4BP,IAAI,CAACS,GAAjC;AACD,GAHG,CAAJ;AAKAN,EAAAA,IAAI,CAAE,GAAEH,IAAI,CAACI,KAAM,2BAAf,EAA2C,MAAM;AACnDC,IAAAA,MAAM,CAAC,OAAOH,OAAO,CAACQ,MAAhB,CAAN,CAA8BJ,IAA9B,CAAmC,QAAnC;AACAD,IAAAA,MAAM,CAACH,OAAO,CAACQ,MAAT,CAAN,CAAuBH,OAAvB,CAA+BP,IAAI,CAACU,MAApC;AACD,GAHG,CAAJ;AAKAP,EAAAA,IAAI,CAAE,GAAEH,IAAI,CAACI,KAAM,qBAAf,EAAqC,MAAM;AAC7CC,IAAAA,MAAM,CAAC,OAAOH,OAAO,CAACS,GAAhB,CAAN,CAA2BL,IAA3B,CAAgC,QAAhC;AACD,GAFG,CAAJ;AAIAH,EAAAA,IAAI,CAAE,GAAEH,IAAI,CAACI,KAAM,2BAAf,EAA2C,MAAM;AACnDC,IAAAA,MAAM,CAAC,OAAOH,OAAO,CAACU,IAAhB,CAAN,CAA4BN,IAA5B,CAAiC,QAAjC;AACAD,IAAAA,MAAM,CAACH,OAAO,CAACU,IAAT,CAAN,CAAqBC,OAArB,CAA6B,sCAA7B;AACD,GAHG,CAAJ;AAKAV,EAAAA,IAAI,CAAE,GAAEH,IAAI,CAACI,KAAM,QAAOJ,IAAI,CAACc,UAAL,GAAkB,aAAlB,GAAkC,IAAK,eAA7D,EAA6E,MAAM;AACrF,QAAId,IAAI,CAACc,UAAT,EAAqB;AACnBT,MAAAA,MAAM,CAAC,OAAOH,OAAO,CAACY,UAAhB,CAAN,CAAkCR,IAAlC,CAAuC,QAAvC;AACAD,MAAAA,MAAM,CAACH,OAAO,CAACY,UAAT,CAAN,CAA2BP,OAA3B,CAAmCP,IAAI,CAACc,UAAxC;AACD,KAHD,MAGO;AACLT,MAAAA,MAAM,CAACH,OAAO,CAACY,UAAT,CAAN,CAA2BC,aAA3B;AACD;AACF,GAPG,CAAJ;AASAZ,EAAAA,IAAI,CAAE,GAAEH,IAAI,CAACI,KAAM,QAAOJ,IAAI,CAACgB,OAAL,GAAe,aAAf,GAA+B,IAAK,YAA1D,EAAuE,MAAM;AAC/E,QAAIhB,IAAI,CAACgB,OAAT,EAAkB;AAChBX,MAAAA,MAAM,CAAC,OAAOH,OAAO,CAACc,OAAhB,CAAN,CAA+BV,IAA/B,CAAoC,QAApC;AACAD,MAAAA,MAAM,CAACH,OAAO,CAACc,OAAT,CAAN,CAAwBC,cAAxB,CAAuC,MAAvC,EAA+CjB,IAAI,CAACgB,OAAL,CAAaE,IAA5D;;AACA,UAAIlB,IAAI,CAACgB,OAAL,CAAaE,IAAb,KAAsB,QAA1B,EAAoC;AAClCb,QAAAA,MAAM,CAACH,OAAO,CAACc,OAAT,CAAN,CAAwBC,cAAxB,CAAuC,KAAvC,EAA8CjB,IAAI,CAACgB,OAAL,CAAaG,GAA3D;AACD,OAFD,MAEO;AACLd,QAAAA,MAAM,CAAC,OAAOH,OAAO,CAACc,OAAR,CAAgBG,GAAxB,CAAN,CAAmCb,IAAnC,CAAwC,QAAxC;AACAD,QAAAA,MAAM,CAACH,OAAO,CAACc,OAAR,CAAgBG,GAAjB,CAAN,CAA4BN,OAA5B,CAAoC,qBAApC;AACD;AACF,KATD,MASO;AACLR,MAAAA,MAAM,CAACH,OAAO,CAACc,OAAT,CAAN,CAAwBD,aAAxB;AACD;AACF,GAbG,CAAJ;AAcD,CAxDD","sourcesContent":["const { icons } = require('../_data/simple-icons.json');\r\nconst { getIconSlug } = require('../scripts/utils.js');\r\n\r\nicons.forEach(icon => {\r\n  const filename = getIconSlug(icon);\r\n  const subject = require(`../icons/${filename}.js`);\r\n\r\n  test(`${icon.title} has the correct \"title\"`, () => {\r\n    expect(typeof subject.title).toBe('string');\r\n    expect(subject.title).toEqual(icon.title);\r\n  });\r\n\r\n  test(`${icon.title} has the correct \"slug\"`, () => {\r\n    expect(typeof subject.slug).toBe('string');\r\n    expect(subject.slug).toEqual(getIconSlug(icon));\r\n  });\r\n\r\n  test(`${icon.title} has the correct \"hex\" value`, () => {\r\n    expect(typeof subject.hex).toBe('string');\r\n    expect(subject.hex).toEqual(icon.hex);\r\n  });\r\n\r\n  test(`${icon.title} has the correct \"source\"`, () => {\r\n    expect(typeof subject.source).toBe('string');\r\n    expect(subject.source).toEqual(icon.source);\r\n  });\r\n\r\n  test(`${icon.title} has an \"svg\" value`, () => {\r\n    expect(typeof subject.svg).toBe('string');\r\n  });\r\n\r\n  test(`${icon.title} has a valid \"path\" value`, () => {\r\n    expect(typeof subject.path).toBe('string');\r\n    expect(subject.path).toMatch(/^[MmZzLlHhVvCcSsQqTtAaEe0-9-,.\\s]+$/g);\r\n  });\r\n\r\n  test(`${icon.title} has ${icon.guidelines ? \"the correct\" : \"no\"} \"guidelines\"`, () => {\r\n    if (icon.guidelines) {\r\n      expect(typeof subject.guidelines).toBe('string');\r\n      expect(subject.guidelines).toEqual(icon.guidelines);\r\n    } else {\r\n      expect(subject.guidelines).toBeUndefined();\r\n    }\r\n  });\r\n\r\n  test(`${icon.title} has ${icon.license ? \"the correct\" : \"no\"} \"license\"`, () => {\r\n    if (icon.license) {\r\n      expect(typeof subject.license).toBe('object');\r\n      expect(subject.license).toHaveProperty('type', icon.license.type);\r\n      if (icon.license.type === \"custom\") {\r\n        expect(subject.license).toHaveProperty('url', icon.license.url);\r\n      } else {\r\n        expect(typeof subject.license.url).toBe('string');\r\n        expect(subject.license.url).toMatch(/^https?:\\/\\/[^\\s]+$/);\r\n      }\r\n    } else {\r\n      expect(subject.license).toBeUndefined();\r\n    }\r\n  });\r\n});\r\n"]}